/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'maven'
apply from: "$buildScriptsDir/provided-configuration.gradle"

ext {
    projectPomName = ""
    projectPomDescription = ""
    whenPomConfigured = { p -> writePomToArtifactsDirectory(p, project.name) }
}

def releaseNotesFileDir = "$project.buildDir/src/common/main/resources"
task copyReleaseNotesToCommonResourcesDir(type: Copy) {
    from(rootDir) {
        include "release_notes.txt"
    }
    into releaseNotesFileDir
}

processResources.dependsOn copyReleaseNotesToCommonResourcesDir

sourceSets {
    main {
        resources {
            srcDir releaseNotesFileDir
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    mavenDeployer
}

dependencies {
    mavenDeployer "org.apache.maven.wagon:wagon-ftp:2.8"
}

afterEvaluate {
    assert (!projectPomName.isEmpty() && !projectPomDescription.isEmpty())
    uploadArchives {
        ext.requriedProperties = ["mavenRepositoryUrl", "mavenUsername", "mavenUserPassword"]
        if (requiredPropertiesExist(requriedProperties)) {
            repositories {
                mavenDeployer {
                    configuration = configurations.mavenDeployer

                    repository(url: mavenRepositoryUrl) {
                        authentication(userName: mavenUsername, password: mavenUserPassword)
                    }

                    updatePomWithGeneralProjectInformation(pom)
                }
            }
        }
    }
}

task prepareSourcesArchive(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    doFirst {
        archiveName = "$archivesBaseName-$version-sources.jar"
    }
}

task prepareJavadocArchive(type: Jar){
    classifier = 'javadoc'
    from "$docsDir/javadoc"
    doFirst {
        archiveName = "$archivesBaseName-$version-javadoc.jar"
    }
    dependsOn javadoc
}

task copyLibsToGlobalArtifactsFolder(type: Copy) {
    from libsDir
    into new File(artifactsDirectoryRoot, project.name)
    dependsOn assemble, prepareSourcesArchive, prepareJavadocArchive
}

task prepare {
    dependsOn copyLibsToGlobalArtifactsFolder
}

// endregion Publishing configuration

// region Public methods
ext {
    updatePomWithGeneralProjectInformation = this.&updatePomWithGeneralProjectInformation
    writePomToArtifactsDirectory = this.&writePomToArtifactsDirectory
    getArtifactsDirectory = this.&getArtifactsDirectory
}

def updatePomWithGeneralProjectInformation(pomObject) {
    pomObject.project {

        name = projectPomName
        description = projectPomDescription
        url = "https://github.com/Microsoft/ApplicationInsights-Java"

        licenses {
            license {
                name = "MIT License"
                url = "http://www.opensource.org/licenses/mit-license.php"
            }
        }

        scm {
            url = "scm:git:https://github.com/Microsoft/ApplicationInsights-Java"
            connection = "scm:git:git://github.com/Microsoft/ApplicationInsights-Java.git"
        }

        developers {
            developer {
                id = "microsoft"
                name = "Microsoft"
            }
        }
    }

    pomObject.scopeMappings.addMapping(MavenPlugin.PROVIDED_COMPILE_PRIORITY, configurations.getByName("provided"), Conf2ScopeMappingContainer.PROVIDED)

    pomObject.whenConfigured whenPomConfigured
}

def writePomToArtifactsDirectory(pomObject, directoryName) {
    def pomFilename = pomObject.getArtifactId() + '-' + pomObject.getVersion() + '.pom'
    def artifactsDir = getArtifactsDirectory(directoryName)
    def pomWriter = new FileWriter(new File(artifactsDir, pomFilename), false)

    // Converting the POM object to string, to be able to read one by line.
    StringWriter stringWriter = new StringWriter()
    pomObject.writeTo(stringWriter)
    StringReader reader = new StringReader(stringWriter.toString())

    // Appending xml schema first
    String schema = reader.readLine()
    pomWriter.append(schema + "\n")

    // Appending license text
    def licenseText = GFileUtils.readFile(new File("LICENSE.TXT"))
    pomWriter.append("<!--\n")
    pomWriter.append(licenseText + "\n")
    pomWriter.append("-->\n")

    // Appending the rest of the pom file.
    for (String line : reader.readLines()) {
        pomWriter.append(line + "\n")
    }

    pomWriter.close()
}

def getArtifactsDirectory(artifactId) {
    File dir = new File(artifactsDirectoryRoot, artifactId)
    dir.mkdirs()

    return dir
}

// endregion Public methods
