/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

apply from: "$buildScriptsDir/common-java.gradle"

archivesBaseName = 'applicationinsights-all'

// Since we're building the shadow jar, we have no use in the jar contains only CollectD code.
jar.enabled = false

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('org.ow2.asm:asm:5.0.3'))
        exclude(dependency('org.ow2.asm:asm-commons:5.0.3'))
        exclude(dependency('org.ow2.asm:asm-tree:5.0.3'))
    }
}

dependencies {
    compile project(':core')
    compile project(':web')
    compile project(':logging:log4j1_2')
    compile project(':logging:log4j2')
    compile project(':logging:logback')
}

gradle.projectsEvaluated {
    project.configurations.compile.dependencies.each { dep ->
        ConfigurationContainer cc = dep.dependencyProject.configurations

        def providedConfiguration = cc.findByName("provided")
        if (providedConfiguration != null) {
            providedConfiguration.dependencies.each { provDep ->
                shadowJar {
                    dependencies {
                        if (provDep instanceof ProjectDependency) {
                            def projPath = provDep.dependencyProject.path
                            logger.info "Excluding provided project dependency for project $projPath"
                            exclude(project(projPath))
                        } else if (provDep instanceof ExternalModuleDependency) {
                            def gav = "$provDep.group:$provDep.name:$provDep.version"
                            logger.info "Excluding provided external dependency for artifact $gav"
                            exclude(dependency(gav))
                        }
                    }
                }
            }
        }
    }
}

// Building the shadow (fat) jar after compiling sources.
tasks.assemble.doLast { tasks.shadowJar.execute() }