/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

apply from: "$buildScriptsDir/common-java.gradle"

// Since we're building the shadow jar, we have no use in the jar contains only CollectD code.
jar.enabled = false

shadowJar {
    classifier = ''
}

def collectdLibDir = System.env.'COLLECTD_HOME'
def collectDLibPath = new File(collectdLibDir, "lib/collectd-api.jar")

if (!collectDLibPath.exists()) {
    throw new ProjectConfigurationException("Archive $collectDLibPath required for building CollectD plugin could not be found.", null)
}

archivesBaseName = 'applicationinsights-collectd'

// Defining a local provided configuration WITHOUT having it extending the compile configuration (like done in
// the provided-configuration.gradle file).
// This is a work-around so the collectd library (org.collectd.api) will be excluded from the generated jar
configurations {
    provided
}
sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

dependencies {
    compile project(':core')
    provided files(collectDLibPath)
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

// Building the shadow (fat) jar after compiling sources.
tasks.assemble.doLast { tasks.shadowJar.execute() }

